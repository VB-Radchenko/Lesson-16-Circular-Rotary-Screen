C51 COMPILER V9.57.0.0   RTC_51                                                            07/09/2024 01:59:10 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE RTC_51
OBJECT MODULE PLACED IN .\Objects\RTC_51.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE RTC_51.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\RTC_51.lst) TABS(2) OBJECT(.\Objects\RTC_51.obj)

line level    source

   1          #include "sys.h"
   2          
   3          u16 SysTick_RTC   =0; 
   4          bit   RTC_Flog    =0;
   5          
   6          void Delayus() {u8 i;for(i=0;i<80;i++);}  //50
   7          //===========================
   8          void SDA_IN()  {P3MDOUT=P3MDOUT&0xF7;}
   9          //===========================
  10          void SDA_OUT() {P3MDOUT=P3MDOUT|0x08;}
  11          //==========================
  12          void Rx8130_Start()
  13          { 
  14   1                  SDA_OUT();
  15   1                  RTC_SDA=1;
  16   1                  RTC_SCL=1;
  17   1                  Delayus();  //15
  18   1                  RTC_SDA=0;
  19   1                  Delayus();  //15
  20   1                  RTC_SCL=0;
  21   1                  Delayus();  //15
  22   1      }
  23          //================================
  24          void Rx8130_Stop()
  25          { 
  26   1                  SDA_OUT();
  27   1                  RTC_SDA=0;
  28   1                  RTC_SCL=1;
  29   1                  Delayus();//15
  30   1                  RTC_SDA=1;
  31   1                  Delayus();//15
  32   1                  SDA_IN();
  33   1      }
  34          //================================
  35          void Rx8130_Mack()
  36          { 
  37   1                  SDA_OUT();
  38   1                  RTC_SDA=0;
  39   1                  Delayus();
  40   1                  RTC_SCL=1;
  41   1                  Delayus();
  42   1                  RTC_SCL=0;
  43   1                  Delayus();
  44   1      }
  45          //=================================
  46          void Rx8130_Mnak()
  47          { 
  48   1                  SDA_OUT();
  49   1                  RTC_SDA=1;
  50   1                  Delayus();
  51   1                  RTC_SCL=1;
  52   1                  Delayus();
  53   1                  RTC_SCL=0;
  54   1                  Delayus();
C51 COMPILER V9.57.0.0   RTC_51                                                            07/09/2024 01:59:10 PAGE 2   

  55   1      }
  56          //=================================
  57          void Rx8130_Cack()
  58          { 
  59   1                  u8 i;
  60   1                  SDA_IN();
  61   1                  RTC_SDA=1;
  62   1                  Delayus();
  63   1                  RTC_SCL=1;
  64   1                  Delayus();
  65   1                  for(i=0;i<50;i++)
  66   1                  {   
  67   2                          if(!RTC_SDA) break;
  68   2                          Delayus();
  69   2                  }
  70   1                  RTC_SCL=0;
  71   1                  Delayus();
  72   1                  SDA_OUT();
  73   1      }
  74          
  75          //=========================================
  76          void Rx8130_Writ_Byte(u8 dat)
  77          { 
  78   1                  u8 i;
  79   1                  SDA_OUT();
  80   1                  for(i=0;i<8;i++)
  81   1                  { 
  82   2                            if(dat&0x80)   RTC_SDA=1;
  83   2                          else           RTC_SDA=0;
  84   2                          dat=(dat<<1);
  85   2                          Delayus();
  86   2                          RTC_SCL=1;
  87   2                          Delayus();
  88   2                          RTC_SCL=0;
  89   2                          Delayus();
  90   2                  }
  91   1                  Rx8130_Cack();
  92   1      }
  93          
  94          //====================================================
  95          u8 Rx8130_Read_Byte()
  96          { 
  97   1                  u8 i;
  98   1                  u8 Dat;
  99   1                  SDA_IN();
 100   1                  for(i=0;i<8;i++)
 101   1                  { 
 102   2                          Delayus();
 103   2                          RTC_SCL=1;
 104   2                          Delayus();
 105   2                          Dat=(Dat<<1);
 106   2                          if(RTC_SDA)  Dat=Dat|0x01;
 107   2                          else         Dat=Dat&0xFE;
 108   2                          RTC_SCL=0;
 109   2                          Delayus();
 110   2                  }
 111   1                  return(Dat);
 112   1      }
 113          u8 RTC_Get_Week(u8 years,u8 month,u8 day)
 114          { 
 115   1        u8 xdata weak;
 116   1        u16 xdata year;
C51 COMPILER V9.57.0.0   RTC_51                                                            07/09/2024 01:59:10 PAGE 3   

 117   1        year= years+2000;
 118   1        if(month==1||month==2)
 119   1        {
 120   2          month += 12, year--;
 121   2        }
 122   1        if((year<1752)||(year==1752&&month<9)||(year==1752&&month==9&&day<3))
 123   1        {
 124   2          weak = (day + 2*month + 3*(month+1)/5 + year + year/4 + 6)%7;
 125   2        }
 126   1        else
 127   1        {
 128   2          weak = (day +1 + 2*month + 3*(month+1)/5 + year + year/4 -year/100 + year/400)%7;
 129   2        }
 130   1         return weak;
 131   1      }
 132          //把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 133          void Read_Time()
 134          { 
 135   1                  u8 i,N,M; 
 136   1                            u8 Rtcdata[]={0,0,0,0,0,0,0,0};
 137   1                  Rx8130_Start();
 138   1                  Rx8130_Writ_Byte(0x64);
 139   1                  Rx8130_Writ_Byte(0x10);
 140   1                  Rx8130_Stop();
 141   1                  Rx8130_Start();
 142   1                  Rx8130_Writ_Byte(0x65);
 143   1                  for(i=6;i>0;i--)
 144   1                  { 
 145   2                                Rtcdata[i]=Rx8130_Read_Byte();
 146   2                                Rx8130_Mack();
 147   2                  }
 148   1                  Rtcdata[0]=Rx8130_Read_Byte(); Rx8130_Mnak();
 149   1                  Rx8130_Stop();
 150   1                  for(i=0;i<3;i++)  //年月日转换成HEX
 151   1                  { 
 152   2                                            N=Rtcdata[i]/16;
 153   2                                M=Rtcdata[i]%16;
 154   2                                Rtcdata[i]=N*10+M;
 155   2                  }
 156   1                  for(i=4;i<7;i++)  //时分秒转换成HEX
 157   1                  { 
 158   2                                N=Rtcdata[i]/16;
 159   2                                M=Rtcdata[i]%16;
 160   2                                Rtcdata[i]=N*10+M;
 161   2                  }
 162   1                  Rtcdata[3]=RTC_Get_Week(Rtcdata[0],Rtcdata[1],Rtcdata[2]);//周
 163   1                  Rtcdata[7]=0;
 164   1                  Write_Dgus(0X0010,(Rtcdata[0]<<8)+Rtcdata[1]);
 165   1                  Write_Dgus(0X0011,(Rtcdata[2]<<8)+Rtcdata[3]);
 166   1                  Write_Dgus(0X0012,(Rtcdata[4]<<8)+Rtcdata[5]);
 167   1                  Write_Dgus(0X0013,(Rtcdata[6]<<8)+Rtcdata[7]);
 168   1      }
 169          //====================================================================
 170          void Init_Rtc()
 171          { 
 172   1                   u8 i;
 173   1                     Rx8130_Start();
 174   1                   Rx8130_Writ_Byte(0x64);
 175   1                   Rx8130_Writ_Byte(0x1d);
 176   1                   Rx8130_Stop();
 177   1                   Rx8130_Start();
 178   1                   Rx8130_Writ_Byte(0x65);
C51 COMPILER V9.57.0.0   RTC_51                                                            07/09/2024 01:59:10 PAGE 4   

 179   1                   i=Rx8130_Read_Byte();
 180   1                   Rx8130_Mack();
 181   1                   Rx8130_Read_Byte();
 182   1                   Rx8130_Mnak();
 183   1                   Rx8130_Stop();
 184   1                   if((i&0x02)==0x02)
 185   1                     {  
 186   2                        //重新配置时间
 187   2                        Rx8130_Start();   //30=00
 188   2                        Rx8130_Writ_Byte(0x64);
 189   2                        Rx8130_Writ_Byte(0x30);
 190   2                        Rx8130_Writ_Byte(0x00);
 191   2                        Rx8130_Stop();
 192   2                        Rx8130_Start();   //1C-1F=48 00 40 10
 193   2                        Rx8130_Writ_Byte(0x64);
 194   2                        Rx8130_Writ_Byte(0x1C);
 195   2                        Rx8130_Writ_Byte(0x48);
 196   2                        Rx8130_Writ_Byte(0x00);
 197   2                        Rx8130_Writ_Byte(0x40);
 198   2                        Rx8130_Writ_Byte(0x10);
 199   2                        Rx8130_Stop();
 200   2                        Rx8130_Start();   //10-16=RTC设置值 BCD格式
 201   2                        Rx8130_Writ_Byte(0x64);
 202   2                        Rx8130_Writ_Byte(0x10);
 203   2                        Rx8130_Writ_Byte(0x00); //秒
 204   2                        Rx8130_Writ_Byte(0x00); //分
 205   2                        Rx8130_Writ_Byte(0x00); //时
 206   2                        Rx8130_Writ_Byte(0x01); //星期
 207   2                        Rx8130_Writ_Byte(0x01); //日
 208   2                        Rx8130_Writ_Byte(0x01); //月
 209   2                        Rx8130_Writ_Byte(0x17); //年
 210   2                        Rx8130_Stop();
 211   2                        Rx8130_Start();   //1E-1F 00 10
 212   2                        Rx8130_Writ_Byte(0x64);
 213   2                        Rx8130_Writ_Byte(0x1E);
 214   2                        Rx8130_Writ_Byte(0x00); 
 215   2                        Rx8130_Writ_Byte(0x10);     
 216   2                        Rx8130_Stop();
 217   2                     }
 218   1      }
 219          //=========================================
 220          void RTC_Set_Time()
 221          {             
 222   1                  u16  Va=Read_Dgus(0x009C); //0x5AA5
 223   1                  if(Va==0x5AA5)
 224   1                  {     u8 N=0,S=0;bit  Flog=1;
 225   2                        u8 TimeS[]={0,0,0,0,0,0,0};
 226   2                        u16  V1=Read_Dgus(0x009D); //年，月
 227   2                        N=(u8)(V1>>8);TimeS[0]=((N/10)*16)+(N%10);
 228   2                        N=(u8)(V1);   TimeS[1]=((N/10)*16)+(N%10);
 229   2                        V1=Read_Dgus(0x009E); //日，星期
 230   2                        N=(u8)(V1>>8);TimeS[2]=((N/10)*16)+(N%10);
 231   2                        TimeS[3]=RTC_Get_Week(TimeS[0],TimeS[1],TimeS[2]);//周
 232   2                        N=(u8)(V1);   TimeS[4]=((N/10)*16)+(N%10);
 233   2                        V1=Read_Dgus(0x009F); //时，分
 234   2                        N=(u8)(V1>>8);TimeS[5]=((N/10)*16)+(N%10);
 235   2                        N=(u8)(V1);   TimeS[6]=((N/10)*16)+(N%10);
 236   2      //                        V1=Read_Dgus(0xDFFF); //秒，x  
 237   2      //                        N=(u8)(V1>>8);TimeS[6]=((N/10)*16)+(N%10);
 238   2                        Write_Dgus(0x009c,0); 
 239   2                        while(Flog)
 240   2                        { 
C51 COMPILER V9.57.0.0   RTC_51                                                            07/09/2024 01:59:10 PAGE 5   

 241   3                                  Rx8130_Start();   //30=00
 242   3                              Rx8130_Writ_Byte(0x64);
 243   3                              Rx8130_Writ_Byte(0x30);
 244   3                              Rx8130_Writ_Byte(0x00);
 245   3                              Rx8130_Stop();
 246   3                              Rx8130_Start();   //1C-1F=48 00 40 10
 247   3                              Rx8130_Writ_Byte(0x64);
 248   3                              Rx8130_Writ_Byte(0x1C);
 249   3                              Rx8130_Writ_Byte(0x48);
 250   3                              Rx8130_Writ_Byte(0x00);
 251   3                              Rx8130_Writ_Byte(0x40);
 252   3                              Rx8130_Writ_Byte(0x10);
 253   3                              Rx8130_Stop();
 254   3                              Rx8130_Start();   //10-16=RTC设置值 BCD格式
 255   3                              Rx8130_Writ_Byte(0x64);
 256   3                              Rx8130_Writ_Byte(0x10);
 257   3                              Rx8130_Writ_Byte(TimeS[6]); //秒
 258   3                              Rx8130_Writ_Byte(TimeS[5]); //分
 259   3                              Rx8130_Writ_Byte(TimeS[4]); //时
 260   3                              Rx8130_Writ_Byte(TimeS[3]); //星期
 261   3                              Rx8130_Writ_Byte(TimeS[2]); //日
 262   3                              Rx8130_Writ_Byte(TimeS[1]); //月
 263   3                              Rx8130_Writ_Byte(TimeS[0]); //年
 264   3                              Rx8130_Stop();
 265   3                              Rx8130_Start();   //1E-1F 00 10
 266   3                              Rx8130_Writ_Byte(0x64);
 267   3                              Rx8130_Writ_Byte(0x1E);
 268   3                              Rx8130_Writ_Byte(0x00); 
 269   3                              Rx8130_Writ_Byte(0x10);     
 270   3                              Rx8130_Stop(); 
 271   3                              Flog=0;
 272   3                         }
 273   2                  }
 274   1      }
 275          //===================================
 276          void        Clock()
 277          {
 278   1                             if(RTC_Flog==0){ RTC_Flog=1;  Init_Rtc(); }
 279   1                     if(SysTick_RTC >= 500) 
 280   1                     {
 281   2                          Read_Time();                //更新硬件RTC时间
 282   2                          SysTick_RTC = 0;
 283   2                     }
 284   1                   RTC_Set_Time();
 285   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1391    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =      2      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
